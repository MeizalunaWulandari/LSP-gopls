name: Gopls Update Checker

on:
  schedule:
    - cron: "0 0 */7 * *"

jobs:
  compareTag:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.tagCompare.outputs.LATEST_TAG }}
      requires_update: ${{ steps.tagCompare.outputs.REQUIRES_UPDATE }}
      branch_name: ${{ steps.tagCompare.outputs.BRANCH_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - id: tagCompare
        name: Run script
        shell: python {0}
        run: |
          import re
          import json
          import os
          from typing import Literal

          import urllib.request

          # Set the URL for the GitHub API
          url = "https://api.github.com/repos/golang/tools/tags"

          tags = None
          try:
              # Call the GitHub API and retrieve the tags
              with urllib.request.urlopen(url) as f:
                  tags_str = f.read().decode('utf-8')
              tags = json.loads(tags_str)
          except urllib.error.URLError as e:
              print(f"Error while fetching tags from GitHub API: {e}")
              exit(1)

          latest_version = None
          for tag in tags:
              if tag['name'].startswith('gopls/v'):
                  latest_version = tag['name'].split('v')[1]
                  break

          if latest_version is None:
              print("Could not find latest version from tags.")
              exit(1)

          version = None
          try:
              with open("plugin/version.py", "r") as f:
                  groups = re.search(r"\d+\.\d+\.\d+", f.read())
                  if groups is None:
                      raise ValueError("Could not find version in plugin/version.py.")
                  version = groups.group(0)
          except (IOError, ValueError) as e:
              print(f"Error while reading plugin/version.py: {e}")
              exit(1)

          def compare_semantic_versions(v1: str, v2: str) -> Literal[0, 1]:
              # Split the versions into lists of integers
              v1_parts = [int(x) for x in v1.split(".")]
              v2_parts = [int(x) for x in v2.split(".")]

              # Compare each part of the version
              for i in range(min(len(v1_parts), len(v2_parts))):
                  if v1_parts[i] > v2_parts[i]:
                      return 0
                  elif v1_parts[i] < v2_parts[i]:
                      return 1

              # If all parts are equal, return 1 if v2 has more parts
              return 1 if len(v2_parts) > len(v1_parts) else 0

          # Check if update is required
          requires_update = compare_semantic_versions(version, latest_version)
          branch_name = latest_version.replace(".", "_")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'REQUIRES_UPDATE={requires_update}', file=fh)
              print(f'LATEST_VERSION={latest_version}', file=fh)
              print(f'BRANCH_NAME={branch_name}', file=fh)

  updateVersion:
    needs:
      - compareTag
    if: needs.compareTag.outputs.requires_update == 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: "1.19"
          check-latest: true
          cache: true
      - name: Install GOPLS
        run: go install golang.org/x/tools/gopls@latest
      - uses: actions/setup-python@v4
      - name: Update VERSION
        run: |
          echo "VERSION = '${{ needs.compareTag.outputs.latest_tag }}'" > plugin/version.py
      - name: Update Schema and Settings
        run: |
          python ./scripts/update-schema-settings.py
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: update to latest gopls version ${{ needs.compareTag.outputs.latest_tag }}
          title: Update VERSION to Gopls v${{ needs.compareTag.outputs.latest_tag }}
          labels: auto-update
          body: |
            Update VERSION to Gopls v${{ needs.compareTag.outputs.latest_tag }}
            - [x] Updated `plugin/version.py`
            - [x] Updated `schema` and `settings`
            - [ ] Reviewed changes
          branch: update/gopls_v${{ needs.compareTag.outputs.branch_name }}
